/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { appsGetById } from "../funcs/appsGetById.js";
import { appsList } from "../funcs/appsList.js";
import { appsQuery } from "../funcs/appsQuery.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Apps extends ClientSDK {
  /**
   * List All Apps
   */
  async list(
    options?: RequestOptions,
  ): Promise<components.AppListResponse> {
    return unwrapAsync(appsList(
      this,
      options,
    ));
  }

  /**
   * Get App By Id
   *
   * @remarks
   * Get an app's data by its id.
   */
  async getById(
    request: operations.GetAppByIdV1AppAppIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.AppResponse> {
    return unwrapAsync(appsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Query App
   *
   * @remarks
   * Post a completion request to the ai model given an app id and set of inputs.
   *
   * Inputs are usually in the form of JSON object like:
   *
   * `{'<variable_name>': '<value>'}`
   *
   * Example: `{'name': 'John', 'age': 25}`
   *
   * The variable name should be the same as the variable name in the app.
   *
   * Returns:
   *
   *     - StreamingResponse when request.stream=True
   *
   *     - CompletionResponse when request.stream=False
   */
  async query(
    request: operations.QueryAppV1AppAppIdQueryPostRequest,
    options?: RequestOptions,
  ): Promise<
    operations.QueryAppV1AppAppIdQueryPostResponseQueryAppV1AppAppIdQueryPost
  > {
    return unwrapAsync(appsQuery(
      this,
      request,
      options,
    ));
  }
}
