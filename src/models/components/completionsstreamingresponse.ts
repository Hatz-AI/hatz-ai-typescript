/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompletionsStreamingResponse = {
  /**
   * The type of response (e.g. completion)
   */
  type: string;
  /**
   * The message to be streamed
   */
  message: string;
};

/** @internal */
export const CompletionsStreamingResponse$inboundSchema: z.ZodType<
  CompletionsStreamingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  message: z.string(),
});

/** @internal */
export type CompletionsStreamingResponse$Outbound = {
  type: string;
  message: string;
};

/** @internal */
export const CompletionsStreamingResponse$outboundSchema: z.ZodType<
  CompletionsStreamingResponse$Outbound,
  z.ZodTypeDef,
  CompletionsStreamingResponse
> = z.object({
  type: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionsStreamingResponse$ {
  /** @deprecated use `CompletionsStreamingResponse$inboundSchema` instead. */
  export const inboundSchema = CompletionsStreamingResponse$inboundSchema;
  /** @deprecated use `CompletionsStreamingResponse$outboundSchema` instead. */
  export const outboundSchema = CompletionsStreamingResponse$outboundSchema;
  /** @deprecated use `CompletionsStreamingResponse$Outbound` instead. */
  export type Outbound = CompletionsStreamingResponse$Outbound;
}

export function completionsStreamingResponseToJSON(
  completionsStreamingResponse: CompletionsStreamingResponse,
): string {
  return JSON.stringify(
    CompletionsStreamingResponse$outboundSchema.parse(
      completionsStreamingResponse,
    ),
  );
}

export function completionsStreamingResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompletionsStreamingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionsStreamingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionsStreamingResponse' from JSON`,
  );
}
