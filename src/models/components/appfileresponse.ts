/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AppFileResponse = {
  /**
   * The size of the file in bytes
   */
  size: number;
  /**
   * The module this file belongs to
   */
  module: string;
  /**
   * The unique identifier for this file
   */
  fileId?: string | undefined;
  /**
   * The type identifier for this file
   */
  typeId?: string | undefined;
  /**
   * The key/name of the file
   */
  fileKey: string;
  /**
   * The type of file (e.g. PDF)
   */
  fileType: string;
  /**
   * The object identifier for this file
   */
  objectId: string;
  /**
   * A description of the file
   */
  description: string;
  /**
   * The display name of the file
   */
  displayName: string;
  /**
   * The variable name associated with this file
   */
  variableName: string;
  /**
   * The type of variable this file represents
   */
  variableType: string;
};

/** @internal */
export const AppFileResponse$inboundSchema: z.ZodType<
  AppFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number().int(),
  module: z.string(),
  file_id: z.string().default(""),
  type_id: z.string().default(""),
  file_key: z.string(),
  file_type: z.string(),
  object_id: z.string(),
  description: z.string(),
  display_name: z.string(),
  variable_name: z.string(),
  variable_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "type_id": "typeId",
    "file_key": "fileKey",
    "file_type": "fileType",
    "object_id": "objectId",
    "display_name": "displayName",
    "variable_name": "variableName",
    "variable_type": "variableType",
  });
});

/** @internal */
export type AppFileResponse$Outbound = {
  size: number;
  module: string;
  file_id: string;
  type_id: string;
  file_key: string;
  file_type: string;
  object_id: string;
  description: string;
  display_name: string;
  variable_name: string;
  variable_type: string;
};

/** @internal */
export const AppFileResponse$outboundSchema: z.ZodType<
  AppFileResponse$Outbound,
  z.ZodTypeDef,
  AppFileResponse
> = z.object({
  size: z.number().int(),
  module: z.string(),
  fileId: z.string().default(""),
  typeId: z.string().default(""),
  fileKey: z.string(),
  fileType: z.string(),
  objectId: z.string(),
  description: z.string(),
  displayName: z.string(),
  variableName: z.string(),
  variableType: z.string(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    typeId: "type_id",
    fileKey: "file_key",
    fileType: "file_type",
    objectId: "object_id",
    displayName: "display_name",
    variableName: "variable_name",
    variableType: "variable_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppFileResponse$ {
  /** @deprecated use `AppFileResponse$inboundSchema` instead. */
  export const inboundSchema = AppFileResponse$inboundSchema;
  /** @deprecated use `AppFileResponse$outboundSchema` instead. */
  export const outboundSchema = AppFileResponse$outboundSchema;
  /** @deprecated use `AppFileResponse$Outbound` instead. */
  export type Outbound = AppFileResponse$Outbound;
}

export function appFileResponseToJSON(
  appFileResponse: AppFileResponse,
): string {
  return JSON.stringify(AppFileResponse$outboundSchema.parse(appFileResponse));
}

export function appFileResponseFromJSON(
  jsonString: string,
): SafeParseResult<AppFileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppFileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppFileResponse' from JSON`,
  );
}
