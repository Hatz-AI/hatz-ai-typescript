/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of constant (only 'text' supported)
 */
export const VariableType = {
  Text: "text",
} as const;
/**
 * The type of constant (only 'text' supported)
 */
export type VariableType = ClosedEnum<typeof VariableType>;

export type AppConstant = {
  /**
   * The unique object identifier for this constant
   */
  objectId: string;
  /**
   * The variable name used internally
   */
  variableName: string;
  /**
   * The display name shown to users
   */
  displayName: string;
  /**
   * A description of this constant
   */
  description?: string | null | undefined;
  /**
   * The type of constant (only 'text' supported)
   */
  variableType?: "text" | undefined;
  /**
   * The value of this constant
   */
  value: string;
};

/** @internal */
export const VariableType$inboundSchema: z.ZodNativeEnum<typeof VariableType> =
  z.nativeEnum(VariableType);

/** @internal */
export const VariableType$outboundSchema: z.ZodNativeEnum<typeof VariableType> =
  VariableType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariableType$ {
  /** @deprecated use `VariableType$inboundSchema` instead. */
  export const inboundSchema = VariableType$inboundSchema;
  /** @deprecated use `VariableType$outboundSchema` instead. */
  export const outboundSchema = VariableType$outboundSchema;
}

/** @internal */
export const AppConstant$inboundSchema: z.ZodType<
  AppConstant,
  z.ZodTypeDef,
  unknown
> = z.object({
  object_id: z.string(),
  variable_name: z.string(),
  display_name: z.string(),
  description: z.nullable(z.string()).optional(),
  variable_type: z.literal("text").optional(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "object_id": "objectId",
    "variable_name": "variableName",
    "display_name": "displayName",
    "variable_type": "variableType",
  });
});

/** @internal */
export type AppConstant$Outbound = {
  object_id: string;
  variable_name: string;
  display_name: string;
  description?: string | null | undefined;
  variable_type: "text";
  value: string;
};

/** @internal */
export const AppConstant$outboundSchema: z.ZodType<
  AppConstant$Outbound,
  z.ZodTypeDef,
  AppConstant
> = z.object({
  objectId: z.string(),
  variableName: z.string(),
  displayName: z.string(),
  description: z.nullable(z.string()).optional(),
  variableType: z.literal("text").default("text"),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    objectId: "object_id",
    variableName: "variable_name",
    displayName: "display_name",
    variableType: "variable_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppConstant$ {
  /** @deprecated use `AppConstant$inboundSchema` instead. */
  export const inboundSchema = AppConstant$inboundSchema;
  /** @deprecated use `AppConstant$outboundSchema` instead. */
  export const outboundSchema = AppConstant$outboundSchema;
  /** @deprecated use `AppConstant$Outbound` instead. */
  export type Outbound = AppConstant$Outbound;
}

export function appConstantToJSON(appConstant: AppConstant): string {
  return JSON.stringify(AppConstant$outboundSchema.parse(appConstant));
}

export function appConstantFromJSON(
  jsonString: string,
): SafeParseResult<AppConstant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppConstant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppConstant' from JSON`,
  );
}
