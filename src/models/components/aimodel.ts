/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AIModel = {
  /**
   * The unique identifier/name of the AI model. Use this to specify the model in requests.
   */
  name: string;
  /**
   * The company/organization that developed this model
   */
  developer: string;
  /**
   * The human-readable display name for this model
   */
  displayName: string;
  /**
   * The maximum number of tokens this model can process
   */
  maxTokens: number;
  /**
   * Whether this model has vision/image processing capabilities
   */
  vision: boolean;
};

/** @internal */
export const AIModel$inboundSchema: z.ZodType<AIModel, z.ZodTypeDef, unknown> =
  z.object({
    name: z.string(),
    developer: z.string(),
    display_name: z.string(),
    max_tokens: z.number().int(),
    vision: z.boolean(),
  }).transform((v) => {
    return remap$(v, {
      "display_name": "displayName",
      "max_tokens": "maxTokens",
    });
  });

/** @internal */
export type AIModel$Outbound = {
  name: string;
  developer: string;
  display_name: string;
  max_tokens: number;
  vision: boolean;
};

/** @internal */
export const AIModel$outboundSchema: z.ZodType<
  AIModel$Outbound,
  z.ZodTypeDef,
  AIModel
> = z.object({
  name: z.string(),
  developer: z.string(),
  displayName: z.string(),
  maxTokens: z.number().int(),
  vision: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIModel$ {
  /** @deprecated use `AIModel$inboundSchema` instead. */
  export const inboundSchema = AIModel$inboundSchema;
  /** @deprecated use `AIModel$outboundSchema` instead. */
  export const outboundSchema = AIModel$outboundSchema;
  /** @deprecated use `AIModel$Outbound` instead. */
  export type Outbound = AIModel$Outbound;
}

export function aiModelToJSON(aiModel: AIModel): string {
  return JSON.stringify(AIModel$outboundSchema.parse(aiModel));
}

export function aiModelFromJSON(
  jsonString: string,
): SafeParseResult<AIModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIModel' from JSON`,
  );
}
