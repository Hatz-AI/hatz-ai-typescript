/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompletionResponseChoice,
  CompletionResponseChoice$inboundSchema,
  CompletionResponseChoice$Outbound,
  CompletionResponseChoice$outboundSchema,
} from "./completionresponsechoice.js";
import {
  Usage,
  Usage$inboundSchema,
  Usage$Outbound,
  Usage$outboundSchema,
} from "./usage.js";

export type CompletionResponse = {
  /**
   * List of completion choices
   */
  choices: Array<CompletionResponseChoice>;
  /**
   * The AI model used for processing
   */
  model: string;
  usage: Usage;
};

/** @internal */
export const CompletionResponse$inboundSchema: z.ZodType<
  CompletionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(CompletionResponseChoice$inboundSchema),
  model: z.string(),
  usage: Usage$inboundSchema,
});

/** @internal */
export type CompletionResponse$Outbound = {
  choices: Array<CompletionResponseChoice$Outbound>;
  model: string;
  usage: Usage$Outbound;
};

/** @internal */
export const CompletionResponse$outboundSchema: z.ZodType<
  CompletionResponse$Outbound,
  z.ZodTypeDef,
  CompletionResponse
> = z.object({
  choices: z.array(CompletionResponseChoice$outboundSchema),
  model: z.string(),
  usage: Usage$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionResponse$ {
  /** @deprecated use `CompletionResponse$inboundSchema` instead. */
  export const inboundSchema = CompletionResponse$inboundSchema;
  /** @deprecated use `CompletionResponse$outboundSchema` instead. */
  export const outboundSchema = CompletionResponse$outboundSchema;
  /** @deprecated use `CompletionResponse$Outbound` instead. */
  export type Outbound = CompletionResponse$Outbound;
}

export function completionResponseToJSON(
  completionResponse: CompletionResponse,
): string {
  return JSON.stringify(
    CompletionResponse$outboundSchema.parse(completionResponse),
  );
}

export function completionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompletionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionResponse' from JSON`,
  );
}
