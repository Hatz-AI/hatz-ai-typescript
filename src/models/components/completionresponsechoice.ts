/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompletionResponseMessage,
  CompletionResponseMessage$inboundSchema,
  CompletionResponseMessage$Outbound,
  CompletionResponseMessage$outboundSchema,
} from "./completionresponsemessage.js";

export type CompletionResponseChoice = {
  message: CompletionResponseMessage;
};

/** @internal */
export const CompletionResponseChoice$inboundSchema: z.ZodType<
  CompletionResponseChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: CompletionResponseMessage$inboundSchema,
});

/** @internal */
export type CompletionResponseChoice$Outbound = {
  message: CompletionResponseMessage$Outbound;
};

/** @internal */
export const CompletionResponseChoice$outboundSchema: z.ZodType<
  CompletionResponseChoice$Outbound,
  z.ZodTypeDef,
  CompletionResponseChoice
> = z.object({
  message: CompletionResponseMessage$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionResponseChoice$ {
  /** @deprecated use `CompletionResponseChoice$inboundSchema` instead. */
  export const inboundSchema = CompletionResponseChoice$inboundSchema;
  /** @deprecated use `CompletionResponseChoice$outboundSchema` instead. */
  export const outboundSchema = CompletionResponseChoice$outboundSchema;
  /** @deprecated use `CompletionResponseChoice$Outbound` instead. */
  export type Outbound = CompletionResponseChoice$Outbound;
}

export function completionResponseChoiceToJSON(
  completionResponseChoice: CompletionResponseChoice,
): string {
  return JSON.stringify(
    CompletionResponseChoice$outboundSchema.parse(completionResponseChoice),
  );
}

export function completionResponseChoiceFromJSON(
  jsonString: string,
): SafeParseResult<CompletionResponseChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionResponseChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionResponseChoice' from JSON`,
  );
}
