/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The list of inputs on the app to process. Usually in the form of JSON object like {'\<variable_name\>': '\<value\>'}. The variable name should be the same as the variable name in the app.
 */
export type Inputs = {};

export type AppQueryRequest = {
  /**
   * The list of inputs on the app to process. Usually in the form of JSON object like {'\<variable_name\>': '\<value\>'}. The variable name should be the same as the variable name in the app.
   */
  inputs: Inputs;
  /**
   * The AI model to use for processing. Please use the unique name of the model, not the display name
   */
  model?: string | null | undefined;
  /**
   * Whether to stream the response
   */
  stream?: boolean | undefined;
  /**
   * The list of file uuids to process
   */
  fileUuids?: Array<string> | null | undefined;
};

/** @internal */
export const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Inputs$Outbound = {};

/** @internal */
export const Inputs$outboundSchema: z.ZodType<
  Inputs$Outbound,
  z.ZodTypeDef,
  Inputs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Inputs$ {
  /** @deprecated use `Inputs$inboundSchema` instead. */
  export const inboundSchema = Inputs$inboundSchema;
  /** @deprecated use `Inputs$outboundSchema` instead. */
  export const outboundSchema = Inputs$outboundSchema;
  /** @deprecated use `Inputs$Outbound` instead. */
  export type Outbound = Inputs$Outbound;
}

export function inputsToJSON(inputs: Inputs): string {
  return JSON.stringify(Inputs$outboundSchema.parse(inputs));
}

export function inputsFromJSON(
  jsonString: string,
): SafeParseResult<Inputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Inputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Inputs' from JSON`,
  );
}

/** @internal */
export const AppQueryRequest$inboundSchema: z.ZodType<
  AppQueryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  inputs: z.lazy(() => Inputs$inboundSchema),
  model: z.nullable(z.string()).optional(),
  stream: z.boolean().default(false),
  file_uuids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_uuids": "fileUuids",
  });
});

/** @internal */
export type AppQueryRequest$Outbound = {
  inputs: Inputs$Outbound;
  model?: string | null | undefined;
  stream: boolean;
  file_uuids?: Array<string> | null | undefined;
};

/** @internal */
export const AppQueryRequest$outboundSchema: z.ZodType<
  AppQueryRequest$Outbound,
  z.ZodTypeDef,
  AppQueryRequest
> = z.object({
  inputs: z.lazy(() => Inputs$outboundSchema),
  model: z.nullable(z.string()).optional(),
  stream: z.boolean().default(false),
  fileUuids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    fileUuids: "file_uuids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppQueryRequest$ {
  /** @deprecated use `AppQueryRequest$inboundSchema` instead. */
  export const inboundSchema = AppQueryRequest$inboundSchema;
  /** @deprecated use `AppQueryRequest$outboundSchema` instead. */
  export const outboundSchema = AppQueryRequest$outboundSchema;
  /** @deprecated use `AppQueryRequest$Outbound` instead. */
  export type Outbound = AppQueryRequest$Outbound;
}

export function appQueryRequestToJSON(
  appQueryRequest: AppQueryRequest,
): string {
  return JSON.stringify(AppQueryRequest$outboundSchema.parse(appQueryRequest));
}

export function appQueryRequestFromJSON(
  jsonString: string,
): SafeParseResult<AppQueryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppQueryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppQueryRequest' from JSON`,
  );
}
