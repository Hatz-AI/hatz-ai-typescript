/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AppUserInputResponse = {
  /**
   * The position/order of this input field
   */
  position: number;
  /**
   * Whether this input is required
   */
  required: boolean;
  /**
   * The unique object identifier for this input
   */
  objectId: string;
  /**
   * A description of this input field
   */
  description: string;
  /**
   * The display name shown to users
   */
  displayName: string;
  /**
   * The variable name used internally
   */
  variableName: string;
  /**
   * The type of input (e.g. short_answer)
   */
  variableType: string;
};

/** @internal */
export const AppUserInputResponse$inboundSchema: z.ZodType<
  AppUserInputResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  position: z.number().int(),
  required: z.boolean(),
  object_id: z.string(),
  description: z.string(),
  display_name: z.string(),
  variable_name: z.string(),
  variable_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "object_id": "objectId",
    "display_name": "displayName",
    "variable_name": "variableName",
    "variable_type": "variableType",
  });
});

/** @internal */
export type AppUserInputResponse$Outbound = {
  position: number;
  required: boolean;
  object_id: string;
  description: string;
  display_name: string;
  variable_name: string;
  variable_type: string;
};

/** @internal */
export const AppUserInputResponse$outboundSchema: z.ZodType<
  AppUserInputResponse$Outbound,
  z.ZodTypeDef,
  AppUserInputResponse
> = z.object({
  position: z.number().int(),
  required: z.boolean(),
  objectId: z.string(),
  description: z.string(),
  displayName: z.string(),
  variableName: z.string(),
  variableType: z.string(),
}).transform((v) => {
  return remap$(v, {
    objectId: "object_id",
    displayName: "display_name",
    variableName: "variable_name",
    variableType: "variable_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppUserInputResponse$ {
  /** @deprecated use `AppUserInputResponse$inboundSchema` instead. */
  export const inboundSchema = AppUserInputResponse$inboundSchema;
  /** @deprecated use `AppUserInputResponse$outboundSchema` instead. */
  export const outboundSchema = AppUserInputResponse$outboundSchema;
  /** @deprecated use `AppUserInputResponse$Outbound` instead. */
  export type Outbound = AppUserInputResponse$Outbound;
}

export function appUserInputResponseToJSON(
  appUserInputResponse: AppUserInputResponse,
): string {
  return JSON.stringify(
    AppUserInputResponse$outboundSchema.parse(appUserInputResponse),
  );
}

export function appUserInputResponseFromJSON(
  jsonString: string,
): SafeParseResult<AppUserInputResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppUserInputResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppUserInputResponse' from JSON`,
  );
}
